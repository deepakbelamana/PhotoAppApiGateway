server.port=8082
spring.application.name=ApiGateway
eureka.client.serviceUrl.defaultZone=http://localhost:8010/eureka

#this will enable discovery locator feature
#spring.cloud.gateway.discovery.locator.enabled=true
#allows us to use lowers case letters of service name in URL
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true

#manual configuration of api-gateway routes
spring.cloud.gateway.routes[0].id=users-status-check
spring.cloud.gateway.routes[0].uri = lb://user-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/user-service/users/status/check
spring.cloud.gateway.routes[0].predicates[1]=Method=GET
#allow request only if it contains header , the second parameter is its value
spring.cloud.gateway.routes[0].predicates[2]=Header=Authorization,Bearer (.*)
spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Cookie
#this will redirect the url to the required url
spring.cloud.gateway.routes[0].filters[1]=RewritePath=/user-service/(?<segment>.*), /$\{segment}
#for this route, jwt validation will happen , we need to add the filter explicitly
spring.cloud.gateway.routes[0].filters[2]=AuthorizationHeaderFilter

#configuration for login, no need to create endpoint/make any changes in users-microservices
#spring will provide /login endpoint automatically, we can add our custom url for login for the same
#if we use custom login url , it should be configured in user microservice
spring.cloud.gateway.routes[1].id=users-login
spring.cloud.gateway.routes[1].uri = lb://user-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/user-service/users/login
spring.cloud.gateway.routes[1].predicates[1]=Method=POST
spring.cloud.gateway.routes[1].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[1].filters[1]=RewritePath=/user-service/(?<segment>.*), /$\{segment}

spring.cloud.gateway.routes[2].id = users-create
spring.cloud.gateway.routes[2].uri = lb://user-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/user-service/users
spring.cloud.gateway.routes[2].predicates[1]=Method=POST
spring.cloud.gateway.routes[2].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[2].filters[1]=RewritePath=/user-service/(?<segment>.*), /$\{segment}

spring.cloud.gateway.routes[3].id = users-actuator
spring.cloud.gateway.routes[3].uri = lb://user-service
spring.cloud.gateway.routes[3].predicates[0]=Path=/user-service/actuator/**
spring.cloud.gateway.routes[3].predicates[1]=Method=GET
spring.cloud.gateway.routes[3].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[3].filters[1]=RewritePath=/user-service/(?<segment>.*), /$\{segment}

# ALBUM-SERVICE ROUTE
spring.cloud.gateway.routes[4].id = album-service
spring.cloud.gateway.routes[4].uri = lb://album-service
spring.cloud.gateway.routes[4].predicates[0] = Path=/album-service/**
spring.cloud.gateway.routes[4].filters[0] = RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[4].filters[1] = RewritePath=/album-service/(?<segment>.*), /${segment}


#jwt token secret key
token.secret_key = Hqn5DhRd33i6D6u5tG9CSbRXP7WArXo9Sme96g3uqQ3OdISplaJ1oApoc84xGlXg

##rabbit-mq##
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

##read from cloud config
##spring.config.import=configserver:http://localhost:8012

#actuator endpoints
management.endpoint.gateway.enabled=true
management.endpoints.web.exposure.include=gateway,health,mappings

